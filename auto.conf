DISTRO ??= "nodistro"
DISTRO_NAME ??= "OpenEmbedded"

PREMIRRORS ?= "\
bzr://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
cvs://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
git://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
gitsm://.*/.* http://downloads.yoctoproject.org/mirror/sources/ \n \
hg://.*/.*    http://downloads.yoctoproject.org/mirror/sources/ \n \
osc://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
p4://.*/.*    http://downloads.yoctoproject.org/mirror/sources/ \n \
svn://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n"

MIRRORS =+ "\
ftp://.*/.*      http://downloads.yoctoproject.org/mirror/sources/ \n \
http://.*/.*     http://downloads.yoctoproject.org/mirror/sources/ \n \
https://.*/.*    http://downloads.yoctoproject.org/mirror/sources/ \n"

# enable systemd
DISTRO_FEATURES_append = " systemd"
DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"
VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = "systemd-compat-units"
#DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"

# enable mdev/busybox for init
#VIRTUAL-RUNTIME_dev_manager = "busybox-mdev"
#VIRTUAL-RUNTIME_login_manager = "busybox"
#VIRTUAL-RUNTIME_init_manager = "busybox"
#VIRTUAL-RUNTIME_initscripts = "initscripts"
#VIRTUAL-RUNTIME_keymaps = "keymaps"
#DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"

# use gold linker for ARM/Intel targets
#DISTRO_FEATURES_append_arm = " ld-is-gold"
#DISTRO_FEATURES_append_x86 = " ld-is-gold"

# Enable thumb2 by default
#ARM_INSTRUCTION_SET_armv7a = "thumb"
#ARM_INSTRUCTION_SET_armv7ve = "thumb"

DISTRO_FEATURES_append = " pam "
DISTRO_FEATURES_append = " opengl "
DISTRO_FEATURES_append = " wayland "
DISTRO_FEATURES_remove = "x11"

#INHERIT += "report-error"
INHERIT += "buildhistory"
BUILDHISTORY_COMMIT = "1"

MACHINE ?= "raspberrypi3"
#MACHINE ?= "raspberrypi3-64"
#MACHINE ?= "intel-corei7-64"
#MACHINE ?= "intel-quark"
#MACHINE ?= "dragonboard-410c"
#MACHINE ?= "beaglebone"
#MACHINE ?= "hikey"
#MACHINE ?= "qemux86-64"
#MACHINE ?= "qemuarm"
#MACHINE ?= "overo"

#TCLIBC ?= "musl"
#DISTRO = "poky-tiny"

PREFERRED_PROVIDER_virtual/fftw = "fftw"
PREFERRED_PROVIDER_jpeg = "libjpeg-turbo"
PREFERRED_PROVIDER_jpeg-native = "libjpeg-turbo-native"
EXTRA_IMAGE_FEATURES_append = " package-management ssh-server-openssh"
#EXTRA_IMAGE_FEATURES_append = " tools-sdk"
#EXTRA_IMAGE_FEATURES_append = " tools-debug dbg-pkgs"
#CORE_IMAGE_EXTRA_INSTALL_append = " gawk git "
#CORE_IMAGE_EXTRA_INSTALL_append = " ltp "
CORE_IMAGE_EXTRA_INSTALL_append = " 96boards-tools "
#CORE_IMAGE_EXTRA_INSTALL_append = " chromium "
#CORE_IMAGE_EXTRA_INSTALL_append = " kodi"
#CORE_IMAGE_EXTRA_INSTALL_append = " kodi-startup kodi-addon-pvr-hts xserver-xorg-extension-glx"

#IMAGE_INSTALL_append = " ${@' '.join([x + "-" + y for y in ((d.getVar("LIBC_DEPENDENCIES", True) or "") + ' libgcc libgcc-dev libstdc++ libstdc++-dev').split() for x in (d.getVar('MULTILIB_VARIANTS', True) or "").split()])}"

PREFERRED_VERSION_kodi = "17.%"

#DISTRO_FEATURES_append = " ssp "

# For virtual box image (x86 only)
#IMAGE_FSTYPES_append = " vmdk "
#SYSLINUX_ROOT = "root=/dev/hda2"
#IMAGE_INSTALL_append = " vboxguestdrivers "
# Add 5G extra space
#IMAGE_ROOTFS_EXTRA_SPACE = "5000000"

# WIC image type support
#IMAGE_FSTYPES_append = " wic.bz2"
# WIC Sparse image
#IMAGE_FSTYPES_append = " wic.bmap"
# dosfstools is needed to create the boot partition, mtools to copy to it
#IMAGE_DEPENDS_wic_append = " dosfstools-native mtools-native"
#IMAGE_DEPENDS_wic_append_beaglebone = "virtual/bootloader"
#WKS_FILE = "sdimage-bootpart-8g.wks"
#IMAGE_BOOT_FILES_beaglebone ?= "u-boot.img MLO uEnv.txt uboot.env"
#IMAGE_BOOT_FILES_beaglebone ?= "u-boot.img MLO"
#overo
#IMAGE_FSTYPES_append_overo = " wic"
#WKS_FILE_overo = "sdimage-gumstix.wks"
#IMAGE_BOOT_FILES_overo ?= "MLO u-boot.img uImage"

# Specify SGX GFX providers for Overo
#PREFERRED_PROVIDER_libgles-omap3_overo = "libgles-omap3"
#PREFERRED_PROVIDER_virtual/egl_overo ?= "libgles-omap3"
#PREFERRED_PROVIDER_virtual/libgles1_overo ?= "libgles-omap3"
#PREFERRED_PROVIDER_virtual/libgles2_overo ?= "libgles-omap3"
#PREFERRED_VERSION_libgles-omap3_overo = "5.01.01.02"
#PREFERRED_VERSION_omap3-sgx-modules_overo = "5.01.01.02"
#PREFERRED_PROVIDER_virtual/kernel_overo = "linux-gumstix"
#PREFERRED_VERSION_linux-gumstix = "3.5.%"

#BBMASK = "recipes-qt"
PRSERV_HOST = "localhost:0"

#GPU_MEM = "128"
#WPE_BACKEND = "wayland"
#IMAGE_FSTYPES_append = " squashfs"
PACKAGE_FEED_URIS = "http://96.118.26.202/pub/feeds"
#DEBUG_BUILD = "1"

# enable 32bit userspace on aarch64
#require conf/multilib.conf
#MULTILIBS = "multilib:lib32"
#DEFAULTTUNE_virtclass-multilib-lib32 = "armv7at-neon"

ACCEPT_EULA_dragonboard-410c = "1"
CORE_IMAGE_EXTRA_INSTALL_append_dragonboard-410c = " 96boards-tools"
#IMAGE_FSTYPES_append = " ext4"

#INITRAMFS_IMAGE_BUNDLE_rpi = "1"
#INITRAMFS_IMAGE_rpi = "rpi-initramfs-image"
#KERNEL_INITRAMFS_rpi = "-initramfs"
PREFERRED_VERSION_linux-raspberrypi = "4.8.%"

#MACHINE_FEATURES_append = " vc4graphics"

#ENABLE_UART = "1"
# Enable Turbo mode on Rpi2
ARM_FREQ = "1000"
CORE_FREQ = "500"
SDRAM_FREQ = "500"
OVER_VOLTAGE = "6"

# Set GPU/CPU memory split
GPU_MEM_256 = "128"
GPU_MEM_512 = "196"
GPU_MEM_1024 = "396"


#FULL_OPTIMIZATION_remove = "-O2"
#FULL_OPTIMIZATION_append = " -Os"

#GCCVERSION = "5.%"
#GLIBCVERSION = "2.24"
# Poky goodness
# QA check settings - a little stricter than the OE-Core defaults
WARN_TO_ERROR_QA = "already-stripped compile-host-path install-host-path \
                    installed-vs-shipped ldflags pn-overrides rpaths staticdev \
                    useless-rpaths"
WARN_QA_remove = "${WARN_TO_ERROR_QA}"
ERROR_QA_append = " ${WARN_TO_ERROR_QA}"
#ERROR_QA_remove  = "split-strip"

require conf/distro/include/no-static-libs.inc
require conf/distro/include/yocto-uninative.inc
require conf/distro/include/security_flags.inc

INHERIT += "uninative"
DISTRO_FEATURES_append = " ptest"
#TEST_IMAGE = "1"
TOOLCHAIN ?= "clang"
#TOOLCHAIN_HOST_TASK_append = " nativesdk-cmake "
#SDK_ARCH = "i686"
# chromium
LICENSE_FLAGS_WHITELIST_append = " commercial_ffmpeg commercial_x264 "
# vlc
LICENSE_FLAGS_WHITELIST_append = " commercial_mpeg2dec "
# mpd
LICENSE_FLAGS_WHITELIST_append = " commercial_mpg123 "
# libmad
LICENSE_FLAGS_WHITELIST_append = " commercial_libmad "
# gstreamer1.0-libav
LICENSE_FLAGS_WHITELIST_append = " commercial_gstreamer1.0-libav "


BB_DANGLINGAPPENDS_WARNONLY ?= "1"

# RDK
DISTRO_FEATURES_append =  " gstreamer1"

# qt5-versions.inc
QTVER = "5.1.1"

PREFERRED_VERSION_qtbase-native = "${QTVER}"
PREFERRED_VERSION_qtbase = "${QTVER}"
PREFERRED_VERSION_qtdeclarative = "${QTVER}"
PREFERRED_VERSION_qtgraphicaleffects = "${QTVER}"
PREFERRED_VERSION_qtimageformats = "${QTVER}"
PREFERRED_VERSION_qtjsbackend-native = "${QTVER}"
PREFERRED_VERSION_qtjsbackend = "${QTVER}"
PREFERRED_VERSION_qtmultimedia = "${QTVER}"
PREFERRED_VERSION_qtquick1 = "${QTVER}"
PREFERRED_VERSION_qtscript = "${QTVER}"
PREFERRED_VERSION_qtsensors = "${QTVER}"
PREFERRED_VERSION_qtsvg = "${QTVER}"
PREFERRED_VERSION_qtwebkit-examples = "${QTVER}"
PREFERRED_VERSION_qtwebkit = "${QTVER}"
PREFERRED_VERSION_qtxmlpatterns = "${QTVER}"
PREFERRED_VERSION_qtlocation = "4.999+5.0.0%"
##
PREFERRED_VERSION_qtconnectivity = "${QTVER}"
PREFERRED_VERSION_qtquickcontrols = "${QTVER}"
PREFERRED_VERSION_qttools = "${QTVER}"
PREFERRED_VERSION_nativesdk-qtbase = "${QTVER}"
PREFERRED_VERSION_nativesdk-qttools = "${QTVER}"
PREFERRED_VERSION_qtserialport = "${QTVER}"


# rdk-versions.inc
#
# root location of Generic RDK components
RDK_GENERIC_ROOT_SVN ?= "svn5.teamccp.com/svn/rdk/components/generic"
RDK_GIT ?= "gerrit.teamccp.com"
RDK_GIT_PROTOCOL ?= "https"
RDK_RELEASE ?= "1.99"
RDK_GENERIC_ROOT_GIT ?= "git://${RDK_GIT}/rdk/components/generic"
RDK_COMPONENTS_ROOT_GIT ?= "git://${RDK_GIT}/rdk/components"
RDKB_COMPONENTS_ROOT_GIT ?= "git://${RDK_GIT}/rdk/rdkb/components"
RDKB_CCSP_ROOT_GIT ?= "git://${RDK_GIT}/rdk/rdkb/components/opensource/ccsp"
RDK_GIT_BRANCH ?= "master"
CCSP_GIT_BRANCH ?= "master"
PROJECT_BRANCH ?= "default"

SRCREV_pn-devicesettings ?= "${AUTOREV}"
SRCREV_pn-devicesettings-hal-headers ?= "${SRCREV_pn-devicesettings}"
SRCREV_pn-devicesettings-hal-noop ?= "${AUTOREV}"
SRCREV_pn-dtcpmgr-noop ?= "${AUTOREV}"
SRCREV_pn-dvrmgr-hal-noop ?= "${AUTOREV}"
SRCREV_pn-sectionfilter-hal-noop ?= "${AUTOREV}"
SRCREV_pn-gst-plugins-rdk ?= "${AUTOREV}"
SRCREV_pn-iarmbus ?= "${AUTOREV}"
SRCREV_pn-iarmmgrs ?= "${AUTOREV}"
SRCREV_pn-iarmmgrs-hal-headers ?= "${SRCREV_pn-iarmmgrs}"
SRCREV_pn-iarmmgrs-hal-noop ?= "${AUTOREV}"
SRCREV_pn-rdk-diagnostics ?= "${AUTOREV}"
SRCREV_pn-diagnostics-snmp2json ?= "${AUTOREV}"
SRCREV_pn-rdk-logger ?= "${AUTOREV}"
SRCREV_pn-rdkbrowser ?= "${AUTOREV}"
SRCREV_pn-servicemanager ?= "${AUTOREV}"
SRCREV_pn-rmfstreamer ?= "${AUTOREV}"
SRCREV_pn-rmfapp ?= "${AUTOREV}"
SRCREV_pn-gtestapp ?= "${AUTOREV}"
SRCREV_pn-rmfhalheaders ?= "${AUTOREV}"
SRCREV_pn-rmfgeneric ?= "${AUTOREV}"
SRCREV_pn-trm-common ?= "${AUTOREV}"
SRCREV_pn-recorder ?= "${AUTOREV}"
SRCREV_pn-wsproxy ?= "${AUTOREV}"
SRCREV_pn-qtapp ?= "${AUTOREV}"
SRCREV_pn-xupnp ?= "${AUTOREV}"
SRCREV_pn-tr69agent ?= "${AUTOREV}"
SRCREV_pn-tr69agent-headers ?= "${AUTOREV}"
SRCREV_pn-tr69hostif ?= "${AUTOREV}"
SRCREV_pn-sysint ?= "${AUTOREV}"
SRCREV_pn-vodclient-app ?= "${AUTOREV}"
SRCREV_pn-vodclient-java ?= "${AUTOREV}"
SRCREV_pn-secapi ?= "${AUTOREV}"
SRCREV_pn-storagemanager ?= "${AUTOREV}"
SRCREV_pn-authservice ?= "${AUTOREV}"
SRCREV_pn-cachehelpers ?= "${AUTOREV}"
SRCREV_pn-hdmicec ?= "${AUTOREV}"
SRCREV_pn-hdmicecheader ?= "${AUTOREV}"
SRCREV_pn-tr69hostif-headers ?= "${AUTOREV}"
SRCREV_pn-rmfbase ?= "${AUTOREV}"
SRCREV_pn-rmfosal ?= "${AUTOREV}"
SRCREV_pn-trh ?= "${AUTOREV}"

PACKAGECONFIG_pn-libpcre = "pcre8 unicode-properties pcre16"

IMAGE_INSTALL_append = "\
    qtbase \
    qtbase-tools \
    qtbase-fonts \
    qtbase-plugins \
    qtwebkit \
    qtwayland \
"

IMAGE_INSTALL1_append = "\
    qtbase-fonts \
    qtbase-plugins \
    qtbase-tools \
    qtbase-examples \
    qtdeclarative \
    qtdeclarative-plugins \
    qtdeclarative-tools \
    qtdeclarative-examples \
    qtdeclarative-qmlplugins \
    qtmultimedia \
    qtmultimedia-plugins \
    qtmultimedia-examples \
    qtmultimedia-qmlplugins \
    qtsvg \
    qtsvg-plugins \
    qtsensors \
    qtimageformats-plugins \
    qtsystems \
    qtsystems-tools \
    qtsystems-examples \
    qtsystems-qmlplugins \
    qtscript \
    qt3d \
    qt3d-examples \
    qt3d-qmlplugins \
    qt3d-tools \
    qtwebkit \
    qtwebkit-examples \
    qtwebkit-qmlplugins \
    qtgraphicaleffects-qmlplugins \
    qtconnectivity-qmlplugins \
    qtlocation-plugins \
    qtlocation-qmlplugins \
    cinematicexperience \
"
